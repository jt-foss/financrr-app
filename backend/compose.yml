services:
  rust:
    build:
      context: .
      dockerfile: docker/rust/Dockerfile
    init: true
    restart: unless-stopped
    env_file:
      - .env
    environment:
      TZ: ${TIMEZONE}
    volumes:
      - ./:/usr/src/financrr
      - ./logs:/home/financrr/logs
    ports:
      - "127.0.0.1:3000:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8080/api/status/health" ]
      interval: 10s
      timeout: 3s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy

  db:
    image: postgres:16.4-alpine3.20
    init: true
    restart: unless-stopped
    environment:
      TZ: ${TIMEZONE}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/db/postgresql.conf:/etc/postgresql.conf
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME} || exit 1'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  cache:
    image: ghcr.io/dragonflydb/dragonfly:v1.24.0
    init: true
    restart: unless-stopped
    ulimits:
      memlock: -1
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - dragonflydata:/data

volumes:
  postgres-data: ~
  dragonflydata: ~
